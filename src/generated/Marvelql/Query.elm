-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Marvelql.Query exposing (CharactersOptionalArguments, ComicsOptionalArguments, CreatorsOptionalArguments, EventsOptionalArguments, GetCharacterOptionalArguments, GetComicOptionalArguments, GetCreatorOptionalArguments, GetEventOptionalArguments, GetSeriesOptionalArguments, GetStoryOptionalArguments, SeriesOptionalArguments, StoriesOptionalArguments, characters, comics, creators, engineInfo, events, getCharacter, getComic, getCreator, getEvent, getSeries, getStory, series, stories)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import Marvelql.Enum.CharacterOrderBy
import Marvelql.Enum.ComicOrderBy
import Marvelql.Enum.CreatorOrderBy
import Marvelql.Enum.EventsOrderBy
import Marvelql.Enum.SeriesOrderBy
import Marvelql.Enum.StoriesOrderBy
import Marvelql.InputObject
import Marvelql.Interface
import Marvelql.Object
import Marvelql.Scalar
import Marvelql.ScalarCodecs
import Marvelql.Union


type alias CharactersOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.CharacterWhereInput
    , offset : OptionalArgument Int
    , limit : OptionalArgument Int
    , orderBy : OptionalArgument Marvelql.Enum.CharacterOrderBy.CharacterOrderBy
    }


{-| Fetches a list of characters.

  - offset - Skips the specified number of resources in the result set.
  - limit - Limit the result set to the specified number of resources.

-}
characters : (CharactersOptionalArguments -> CharactersOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Character -> SelectionSet (Maybe (List decodesTo)) RootQuery
characters fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, offset = Absent, limit = Absent, orderBy = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeCharacterWhereInput, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Marvelql.Enum.CharacterOrderBy.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "characters" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias GetCharacterOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.CharacterWhereInput }


{-| Fetches a single character by id.
-}
getCharacter : (GetCharacterOptionalArguments -> GetCharacterOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Character -> SelectionSet (Maybe decodesTo) RootQuery
getCharacter fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeCharacterWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "getCharacter" optionalArgs object_ (identity >> Decode.nullable)


type alias ComicsOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.ComicWhereInput
    , orderBy : OptionalArgument Marvelql.Enum.ComicOrderBy.ComicOrderBy
    , offset : OptionalArgument Int
    , limit : OptionalArgument Int
    }


{-| Fetches a list of comics.

  - offset - Skips the specified number of resources in the result set.
  - limit - Limit the result set to the specified number of resources.

-}
comics : (ComicsOptionalArguments -> ComicsOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Comic -> SelectionSet (Maybe (List decodesTo)) RootQuery
comics fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, offset = Absent, limit = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeComicWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Marvelql.Enum.ComicOrderBy.toString), Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "limit" filledInOptionals.limit Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "comics" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias GetComicOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.ComicWhereInput }


{-| Fetches a single comic by id.
-}
getComic : (GetComicOptionalArguments -> GetComicOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Comic -> SelectionSet (Maybe decodesTo) RootQuery
getComic fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeComicWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "getComic" optionalArgs object_ (identity >> Decode.nullable)


type alias CreatorsOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.CreatorWhereInput
    , orderBy : OptionalArgument Marvelql.Enum.CreatorOrderBy.CreatorOrderBy
    , offset : OptionalArgument Int
    , limit : OptionalArgument Int
    }


{-| Fetches a list of creators.

  - offset - Skips the specified number of resources in the result set.
  - limit - Limit the result set to the specified number of resources.

-}
creators : (CreatorsOptionalArguments -> CreatorsOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Creator -> SelectionSet (Maybe (List decodesTo)) RootQuery
creators fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, offset = Absent, limit = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeCreatorWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Marvelql.Enum.CreatorOrderBy.toString), Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "limit" filledInOptionals.limit Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "creators" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias GetCreatorOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.CreatorWhereInput }


{-| Fetches a single creator by id.
-}
getCreator : (GetCreatorOptionalArguments -> GetCreatorOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Creator -> SelectionSet (Maybe decodesTo) RootQuery
getCreator fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeCreatorWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "getCreator" optionalArgs object_ (identity >> Decode.nullable)


type alias EventsOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.EventsWhereInput
    , orderBy : OptionalArgument Marvelql.Enum.EventsOrderBy.EventsOrderBy
    , offset : OptionalArgument Int
    , limit : OptionalArgument Int
    }


{-| Fetches a list of events.

  - offset - Skips the specified number of resources in the result set.
  - limit - Limit the result set to the specified number of resources.

-}
events : (EventsOptionalArguments -> EventsOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Event -> SelectionSet (Maybe (List decodesTo)) RootQuery
events fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, offset = Absent, limit = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeEventsWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Marvelql.Enum.EventsOrderBy.toString), Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "limit" filledInOptionals.limit Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "events" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias GetEventOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.EventsWhereInput }


{-| Fetches a single event by id.
-}
getEvent : (GetEventOptionalArguments -> GetEventOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Event -> SelectionSet (Maybe decodesTo) RootQuery
getEvent fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeEventsWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "getEvent" optionalArgs object_ (identity >> Decode.nullable)


type alias SeriesOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.SeriesWhereInput
    , orderBy : OptionalArgument Marvelql.Enum.SeriesOrderBy.SeriesOrderBy
    , offset : OptionalArgument Int
    , limit : OptionalArgument Int
    }


{-| Fetches a list of series.

  - offset - Skips the specified number of resources in the result set.
  - limit - Limit the result set to the specified number of resources.

-}
series : (SeriesOptionalArguments -> SeriesOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Series -> SelectionSet (Maybe (List decodesTo)) RootQuery
series fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, offset = Absent, limit = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeSeriesWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Marvelql.Enum.SeriesOrderBy.toString), Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "limit" filledInOptionals.limit Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "series" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias GetSeriesOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.SeriesWhereInput }


{-| Fetches a single series by id.
-}
getSeries : (GetSeriesOptionalArguments -> GetSeriesOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Series -> SelectionSet (Maybe decodesTo) RootQuery
getSeries fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeSeriesWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "getSeries" optionalArgs object_ (identity >> Decode.nullable)


type alias StoriesOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.StoriesWhereInput
    , orderBy : OptionalArgument Marvelql.Enum.StoriesOrderBy.StoriesOrderBy
    , offset : OptionalArgument Int
    , limit : OptionalArgument Int
    }


{-| Fetches a list of stories.

  - offset - Skips the specified number of resources in the result set.
  - limit - Limit the result set to the specified number of resources.

-}
stories : (StoriesOptionalArguments -> StoriesOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Story -> SelectionSet (Maybe (List decodesTo)) RootQuery
stories fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, offset = Absent, limit = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeStoriesWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum Marvelql.Enum.StoriesOrderBy.toString), Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "limit" filledInOptionals.limit Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "stories" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


type alias GetStoryOptionalArguments =
    { where_ : OptionalArgument Marvelql.InputObject.StoriesWhereInput }


{-| Fetches a single story by id.
-}
getStory : (GetStoryOptionalArguments -> GetStoryOptionalArguments) -> SelectionSet decodesTo Marvelql.Object.Story -> SelectionSet (Maybe decodesTo) RootQuery
getStory fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ Marvelql.InputObject.encodeStoriesWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "getStory" optionalArgs object_ (identity >> Decode.nullable)


engineInfo : SelectionSet (Maybe String) RootQuery
engineInfo =
    Object.selectionForField "(Maybe String)" "engineInfo" [] (Decode.string |> Decode.nullable)
