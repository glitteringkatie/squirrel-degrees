-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Marvelql.InputObject exposing (CharacterWhereInput, CharacterWhereInputOptionalFields, ComicWhereInput, ComicWhereInputOptionalFields, CreatorWhereInput, CreatorWhereInputOptionalFields, EventsWhereInput, EventsWhereInputOptionalFields, SeriesWhereInput, SeriesWhereInputOptionalFields, StoriesWhereInput, StoriesWhereInputOptionalFields, buildCharacterWhereInput, buildComicWhereInput, buildCreatorWhereInput, buildEventsWhereInput, buildSeriesWhereInput, buildStoriesWhereInput, encodeCharacterWhereInput, encodeComicWhereInput, encodeCreatorWhereInput, encodeEventsWhereInput, encodeSeriesWhereInput, encodeStoriesWhereInput)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Marvelql.Enum.ComicFormat
import Marvelql.Enum.ComicFormatType
import Marvelql.Enum.DateDescriptor
import Marvelql.Enum.SeriesType
import Marvelql.Interface
import Marvelql.Object
import Marvelql.Scalar
import Marvelql.ScalarCodecs
import Marvelql.Union


buildCharacterWhereInput : (CharacterWhereInputOptionalFields -> CharacterWhereInputOptionalFields) -> CharacterWhereInput
buildCharacterWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, name = Absent, nameStartsWith = Absent, modifiedSince = Absent, comics = Absent, series = Absent, events = Absent, stories = Absent }
    in
    { id = optionals.id, name = optionals.name, nameStartsWith = optionals.nameStartsWith, modifiedSince = optionals.modifiedSince, comics = optionals.comics, series = optionals.series, events = optionals.events, stories = optionals.stories }


type alias CharacterWhereInputOptionalFields =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , nameStartsWith : OptionalArgument String
    , modifiedSince : OptionalArgument String
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , stories : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Type for the CharacterWhereInput input object.
-}
type alias CharacterWhereInput =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    , nameStartsWith : OptionalArgument String
    , modifiedSince : OptionalArgument String
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , stories : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Encode a CharacterWhereInput into a value that can be used as an argument.
-}
encodeCharacterWhereInput : CharacterWhereInput -> Value
encodeCharacterWhereInput input =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input.id ), ( "name", Encode.string |> Encode.optional input.name ), ( "nameStartsWith", Encode.string |> Encode.optional input.nameStartsWith ), ( "modifiedSince", Encode.string |> Encode.optional input.modifiedSince ), ( "comics", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.comics ), ( "series", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.series ), ( "events", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.events ), ( "stories", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.stories ) ]


buildComicWhereInput : (ComicWhereInputOptionalFields -> ComicWhereInputOptionalFields) -> ComicWhereInput
buildComicWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { format = Absent, formatType = Absent, noVariants = Absent, dateDescriptor = Absent, dateRange = Absent, diamondCode = Absent, digitalId = Absent, upc = Absent, isbn = Absent, ean = Absent, issn = Absent, hasDigitalIssue = Absent, modifiedSince = Absent, creators = Absent, characters = Absent, series = Absent, events = Absent, stories = Absent, sharedAppearances = Absent, collaborators = Absent }
    in
    { format = optionals.format, formatType = optionals.formatType, noVariants = optionals.noVariants, dateDescriptor = optionals.dateDescriptor, dateRange = optionals.dateRange, diamondCode = optionals.diamondCode, digitalId = optionals.digitalId, upc = optionals.upc, isbn = optionals.isbn, ean = optionals.ean, issn = optionals.issn, hasDigitalIssue = optionals.hasDigitalIssue, modifiedSince = optionals.modifiedSince, creators = optionals.creators, characters = optionals.characters, series = optionals.series, events = optionals.events, stories = optionals.stories, sharedAppearances = optionals.sharedAppearances, collaborators = optionals.collaborators }


type alias ComicWhereInputOptionalFields =
    { format : OptionalArgument Marvelql.Enum.ComicFormat.ComicFormat
    , formatType : OptionalArgument Marvelql.Enum.ComicFormatType.ComicFormatType
    , noVariants : OptionalArgument Bool
    , dateDescriptor : OptionalArgument Marvelql.Enum.DateDescriptor.DateDescriptor
    , dateRange : OptionalArgument Int
    , diamondCode : OptionalArgument String
    , digitalId : OptionalArgument Int
    , upc : OptionalArgument String
    , isbn : OptionalArgument String
    , ean : OptionalArgument String
    , issn : OptionalArgument String
    , hasDigitalIssue : OptionalArgument Bool
    , modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , creators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , characters : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , stories : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , sharedAppearances : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , collaborators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Type for the ComicWhereInput input object.
-}
type alias ComicWhereInput =
    { format : OptionalArgument Marvelql.Enum.ComicFormat.ComicFormat
    , formatType : OptionalArgument Marvelql.Enum.ComicFormatType.ComicFormatType
    , noVariants : OptionalArgument Bool
    , dateDescriptor : OptionalArgument Marvelql.Enum.DateDescriptor.DateDescriptor
    , dateRange : OptionalArgument Int
    , diamondCode : OptionalArgument String
    , digitalId : OptionalArgument Int
    , upc : OptionalArgument String
    , isbn : OptionalArgument String
    , ean : OptionalArgument String
    , issn : OptionalArgument String
    , hasDigitalIssue : OptionalArgument Bool
    , modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , creators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , characters : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , stories : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , sharedAppearances : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , collaborators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Encode a ComicWhereInput into a value that can be used as an argument.
-}
encodeComicWhereInput : ComicWhereInput -> Value
encodeComicWhereInput input =
    Encode.maybeObject
        [ ( "format", Encode.enum Marvelql.Enum.ComicFormat.toString |> Encode.optional input.format ), ( "formatType", Encode.enum Marvelql.Enum.ComicFormatType.toString |> Encode.optional input.formatType ), ( "noVariants", Encode.bool |> Encode.optional input.noVariants ), ( "dateDescriptor", Encode.enum Marvelql.Enum.DateDescriptor.toString |> Encode.optional input.dateDescriptor ), ( "dateRange", Encode.int |> Encode.optional input.dateRange ), ( "diamondCode", Encode.string |> Encode.optional input.diamondCode ), ( "digitalId", Encode.int |> Encode.optional input.digitalId ), ( "upc", Encode.string |> Encode.optional input.upc ), ( "isbn", Encode.string |> Encode.optional input.isbn ), ( "ean", Encode.string |> Encode.optional input.ean ), ( "issn", Encode.string |> Encode.optional input.issn ), ( "hasDigitalIssue", Encode.bool |> Encode.optional input.hasDigitalIssue ), ( "modifiedSince", (Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.modifiedSince ), ( "creators", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.creators ), ( "characters", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.characters ), ( "series", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.series ), ( "events", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.events ), ( "stories", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.stories ), ( "sharedAppearances", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.sharedAppearances ), ( "collaborators", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.collaborators ) ]


buildCreatorWhereInput : (CreatorWhereInputOptionalFields -> CreatorWhereInputOptionalFields) -> CreatorWhereInput
buildCreatorWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { firstName = Absent, middleName = Absent, lastName = Absent, suffix = Absent, nameStartsWith = Absent, firstNameStartsWith = Absent, middleNameStartsWith = Absent, lastNameStartsWith = Absent, modifiedSince = Absent, comics = Absent, series = Absent, events = Absent, stories = Absent }
    in
    { firstName = optionals.firstName, middleName = optionals.middleName, lastName = optionals.lastName, suffix = optionals.suffix, nameStartsWith = optionals.nameStartsWith, firstNameStartsWith = optionals.firstNameStartsWith, middleNameStartsWith = optionals.middleNameStartsWith, lastNameStartsWith = optionals.lastNameStartsWith, modifiedSince = optionals.modifiedSince, comics = optionals.comics, series = optionals.series, events = optionals.events, stories = optionals.stories }


type alias CreatorWhereInputOptionalFields =
    { firstName : OptionalArgument String
    , middleName : OptionalArgument String
    , lastName : OptionalArgument String
    , suffix : OptionalArgument String
    , nameStartsWith : OptionalArgument String
    , firstNameStartsWith : OptionalArgument String
    , middleNameStartsWith : OptionalArgument String
    , lastNameStartsWith : OptionalArgument String
    , modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , stories : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Type for the CreatorWhereInput input object.
-}
type alias CreatorWhereInput =
    { firstName : OptionalArgument String
    , middleName : OptionalArgument String
    , lastName : OptionalArgument String
    , suffix : OptionalArgument String
    , nameStartsWith : OptionalArgument String
    , firstNameStartsWith : OptionalArgument String
    , middleNameStartsWith : OptionalArgument String
    , lastNameStartsWith : OptionalArgument String
    , modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , stories : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Encode a CreatorWhereInput into a value that can be used as an argument.
-}
encodeCreatorWhereInput : CreatorWhereInput -> Value
encodeCreatorWhereInput input =
    Encode.maybeObject
        [ ( "firstName", Encode.string |> Encode.optional input.firstName ), ( "middleName", Encode.string |> Encode.optional input.middleName ), ( "lastName", Encode.string |> Encode.optional input.lastName ), ( "suffix", Encode.string |> Encode.optional input.suffix ), ( "nameStartsWith", Encode.string |> Encode.optional input.nameStartsWith ), ( "firstNameStartsWith", Encode.string |> Encode.optional input.firstNameStartsWith ), ( "middleNameStartsWith", Encode.string |> Encode.optional input.middleNameStartsWith ), ( "lastNameStartsWith", Encode.string |> Encode.optional input.lastNameStartsWith ), ( "modifiedSince", (Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.modifiedSince ), ( "comics", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.comics ), ( "series", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.series ), ( "events", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.events ), ( "stories", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.stories ) ]


buildEventsWhereInput : (EventsWhereInputOptionalFields -> EventsWhereInputOptionalFields) -> EventsWhereInput
buildEventsWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, nameStartsWith = Absent, modifiedSince = Absent, creators = Absent, characters = Absent, series = Absent, comics = Absent }
    in
    { name = optionals.name, nameStartsWith = optionals.nameStartsWith, modifiedSince = optionals.modifiedSince, creators = optionals.creators, characters = optionals.characters, series = optionals.series, comics = optionals.comics }


type alias EventsWhereInputOptionalFields =
    { name : OptionalArgument String
    , nameStartsWith : OptionalArgument String
    , modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , creators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , characters : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Type for the EventsWhereInput input object.
-}
type alias EventsWhereInput =
    { name : OptionalArgument String
    , nameStartsWith : OptionalArgument String
    , modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , creators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , characters : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Encode a EventsWhereInput into a value that can be used as an argument.
-}
encodeEventsWhereInput : EventsWhereInput -> Value
encodeEventsWhereInput input =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input.name ), ( "nameStartsWith", Encode.string |> Encode.optional input.nameStartsWith ), ( "modifiedSince", (Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.modifiedSince ), ( "creators", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.creators ), ( "characters", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.characters ), ( "series", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.series ), ( "comics", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.comics ) ]


buildSeriesWhereInput : (SeriesWhereInputOptionalFields -> SeriesWhereInputOptionalFields) -> SeriesWhereInput
buildSeriesWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { title = Absent, titleStartsWith = Absent, startYear = Absent, modifiedSince = Absent, contains = Absent, seriesType = Absent, comics = Absent, stories = Absent, events = Absent, creators = Absent, characters = Absent }
    in
    { title = optionals.title, titleStartsWith = optionals.titleStartsWith, startYear = optionals.startYear, modifiedSince = optionals.modifiedSince, contains = optionals.contains, seriesType = optionals.seriesType, comics = optionals.comics, stories = optionals.stories, events = optionals.events, creators = optionals.creators, characters = optionals.characters }


type alias SeriesWhereInputOptionalFields =
    { title : OptionalArgument String
    , titleStartsWith : OptionalArgument String
    , startYear : OptionalArgument Int
    , modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , contains : OptionalArgument Marvelql.Enum.ComicFormat.ComicFormat
    , seriesType : OptionalArgument Marvelql.Enum.SeriesType.SeriesType
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , stories : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , creators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , characters : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Type for the SeriesWhereInput input object.
-}
type alias SeriesWhereInput =
    { title : OptionalArgument String
    , titleStartsWith : OptionalArgument String
    , startYear : OptionalArgument Int
    , modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , contains : OptionalArgument Marvelql.Enum.ComicFormat.ComicFormat
    , seriesType : OptionalArgument Marvelql.Enum.SeriesType.SeriesType
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , stories : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , creators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , characters : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Encode a SeriesWhereInput into a value that can be used as an argument.
-}
encodeSeriesWhereInput : SeriesWhereInput -> Value
encodeSeriesWhereInput input =
    Encode.maybeObject
        [ ( "title", Encode.string |> Encode.optional input.title ), ( "titleStartsWith", Encode.string |> Encode.optional input.titleStartsWith ), ( "startYear", Encode.int |> Encode.optional input.startYear ), ( "modifiedSince", (Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.modifiedSince ), ( "contains", Encode.enum Marvelql.Enum.ComicFormat.toString |> Encode.optional input.contains ), ( "seriesType", Encode.enum Marvelql.Enum.SeriesType.toString |> Encode.optional input.seriesType ), ( "comics", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.comics ), ( "stories", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.stories ), ( "events", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.events ), ( "creators", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.creators ), ( "characters", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.characters ) ]


buildStoriesWhereInput : (StoriesWhereInputOptionalFields -> StoriesWhereInputOptionalFields) -> StoriesWhereInput
buildStoriesWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { modifiedSince = Absent, comics = Absent, series = Absent, events = Absent, creators = Absent, characters = Absent }
    in
    { modifiedSince = optionals.modifiedSince, comics = optionals.comics, series = optionals.series, events = optionals.events, creators = optionals.creators, characters = optionals.characters }


type alias StoriesWhereInputOptionalFields =
    { modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , creators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , characters : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Type for the StoriesWhereInput input object.
-}
type alias StoriesWhereInput =
    { modifiedSince : OptionalArgument Marvelql.ScalarCodecs.DateTime
    , comics : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , series : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , events : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , creators : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    , characters : OptionalArgument (List Marvelql.ScalarCodecs.Id)
    }


{-| Encode a StoriesWhereInput into a value that can be used as an argument.
-}
encodeStoriesWhereInput : StoriesWhereInput -> Value
encodeStoriesWhereInput input =
    Encode.maybeObject
        [ ( "modifiedSince", (Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input.modifiedSince ), ( "comics", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.comics ), ( "series", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.series ), ( "events", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.events ), ( "creators", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.creators ), ( "characters", ((Marvelql.ScalarCodecs.codecs |> Marvelql.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input.characters ) ]
