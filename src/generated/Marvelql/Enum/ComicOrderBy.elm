-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Marvelql.Enum.ComicOrderBy exposing (ComicOrderBy(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-| Order the result set by a field or fields. Multiple values are given priority in the order in which they are passed.
-}
type ComicOrderBy
    = FocDate_asc
    | OnSaleDate_asc
    | Title_asc
    | IssueNumber_asc
    | Modified_asc
    | FocDate_desc
    | OnSaleDate_desc
    | Title_desc
    | IssueNumber_desc
    | Modified_desc


list : List ComicOrderBy
list =
    [ FocDate_asc, OnSaleDate_asc, Title_asc, IssueNumber_asc, Modified_asc, FocDate_desc, OnSaleDate_desc, Title_desc, IssueNumber_desc, Modified_desc ]


decoder : Decoder ComicOrderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "focDate_asc" ->
                        Decode.succeed FocDate_asc

                    "onSaleDate_asc" ->
                        Decode.succeed OnSaleDate_asc

                    "title_asc" ->
                        Decode.succeed Title_asc

                    "issueNumber_asc" ->
                        Decode.succeed IssueNumber_asc

                    "modified_asc" ->
                        Decode.succeed Modified_asc

                    "focDate_desc" ->
                        Decode.succeed FocDate_desc

                    "onSaleDate_desc" ->
                        Decode.succeed OnSaleDate_desc

                    "title_desc" ->
                        Decode.succeed Title_desc

                    "issueNumber_desc" ->
                        Decode.succeed IssueNumber_desc

                    "modified_desc" ->
                        Decode.succeed Modified_desc

                    _ ->
                        Decode.fail ("Invalid ComicOrderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : ComicOrderBy -> String
toString enum =
    case enum of
        FocDate_asc ->
            "focDate_asc"

        OnSaleDate_asc ->
            "onSaleDate_asc"

        Title_asc ->
            "title_asc"

        IssueNumber_asc ->
            "issueNumber_asc"

        Modified_asc ->
            "modified_asc"

        FocDate_desc ->
            "focDate_desc"

        OnSaleDate_desc ->
            "onSaleDate_desc"

        Title_desc ->
            "title_desc"

        IssueNumber_desc ->
            "issueNumber_desc"

        Modified_desc ->
            "modified_desc"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ComicOrderBy
fromString enumString =
    case enumString of
        "focDate_asc" ->
            Just FocDate_asc

        "onSaleDate_asc" ->
            Just OnSaleDate_asc

        "title_asc" ->
            Just Title_asc

        "issueNumber_asc" ->
            Just IssueNumber_asc

        "modified_asc" ->
            Just Modified_asc

        "focDate_desc" ->
            Just FocDate_desc

        "onSaleDate_desc" ->
            Just OnSaleDate_desc

        "title_desc" ->
            Just Title_desc

        "issueNumber_desc" ->
            Just IssueNumber_desc

        "modified_desc" ->
            Just Modified_desc

        _ ->
            Nothing
