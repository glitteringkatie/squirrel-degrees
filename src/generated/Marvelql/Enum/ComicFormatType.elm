-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Marvelql.Enum.ComicFormatType exposing (ComicFormatType(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-| Filter by the issue format type (comic or collection).
-}
type ComicFormatType
    = Comic
    | Collection


list : List ComicFormatType
list =
    [ Comic, Collection ]


decoder : Decoder ComicFormatType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "comic" ->
                        Decode.succeed Comic

                    "collection" ->
                        Decode.succeed Collection

                    _ ->
                        Decode.fail ("Invalid ComicFormatType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : ComicFormatType -> String
toString enum =
    case enum of
        Comic ->
            "comic"

        Collection ->
            "collection"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ComicFormatType
fromString enumString =
    case enumString of
        "comic" ->
            Just Comic

        "collection" ->
            Just Collection

        _ ->
            Nothing
