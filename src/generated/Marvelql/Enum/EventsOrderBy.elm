-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Marvelql.Enum.EventsOrderBy exposing (EventsOrderBy(..), decoder, fromString, list, toString)

import Json.Decode as Decode exposing (Decoder)


{-| Order the result set by a field or fields. Multiple values are given priority in the order in which they are passed.
-}
type EventsOrderBy
    = Name_asc
    | StartDate_asc
    | Modified_asc
    | Name_desc
    | StartDate_desc
    | Modified_desc


list : List EventsOrderBy
list =
    [ Name_asc, StartDate_asc, Modified_asc, Name_desc, StartDate_desc, Modified_desc ]


decoder : Decoder EventsOrderBy
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "name_asc" ->
                        Decode.succeed Name_asc

                    "startDate_asc" ->
                        Decode.succeed StartDate_asc

                    "modified_asc" ->
                        Decode.succeed Modified_asc

                    "name_desc" ->
                        Decode.succeed Name_desc

                    "startDate_desc" ->
                        Decode.succeed StartDate_desc

                    "modified_desc" ->
                        Decode.succeed Modified_desc

                    _ ->
                        Decode.fail ("Invalid EventsOrderBy type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : EventsOrderBy -> String
toString enum =
    case enum of
        Name_asc ->
            "name_asc"

        StartDate_asc ->
            "startDate_asc"

        Modified_asc ->
            "modified_asc"

        Name_desc ->
            "name_desc"

        StartDate_desc ->
            "startDate_desc"

        Modified_desc ->
            "modified_desc"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe EventsOrderBy
fromString enumString =
    case enumString of
        "name_asc" ->
            Just Name_asc

        "startDate_asc" ->
            Just StartDate_asc

        "modified_asc" ->
            Just Modified_asc

        "name_desc" ->
            Just Name_desc

        "startDate_desc" ->
            Just StartDate_desc

        "modified_desc" ->
            Just Modified_desc

        _ ->
            Nothing
